name: Build and Deploy to VPS

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}

            # Criar docker-compose.yml
            cat > docker-compose.prod.yml << 'EOL'
            version: "1"
            services:
              node:
                image: ghcr.io/${{ github.repository }}:main
                command: "npm run start:prod"
                working_dir: /home/node/personalsysbackend
                environment:
                  - NODE_ENV=prod
                  - PORT=${{ secrets.PORT }}
                  - DATABASE_HOST=${{ secrets.DATABASE_HOST }}
                  - DATABASE_PORT=${{ secrets.DATABASE_PORT }}
                  - DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
                  - DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
                  - DATABASE_NAME=${{ secrets.DATABASE_NAME }}
                  - JWT_SECRET=${{ secrets.JWT_SECRET }}
                  - FTP_HOST=${{ secrets.FTP_HOST }}
                  - FTP_USER=${{ secrets.FTP_USER }}
                  - FTP_PASSWORD=${{ secrets.FTP_PASSWORD }}
                  - FTP_CLIENT_IMAGE_PATH=${{ secrets.FTP_CLIENT_IMAGE_PATH }}
                  - FTP_VIDEO_PATH=${{ secrets.FTP_VIDEO_PATH }}
                  - FTP_IMAGE_PATH=${{ secrets.FTP_IMAGE_PATH }}
                  - FTP_THUMBNAIL_PATH=${{ secrets.FTP_THUMBNAIL_PATH }}
                  - VIDEO_BASE_PATH=${{ secrets.VIDEO_BASE_PATH }}
                  - IMAGE_BASE_PATH=${{ secrets.IMAGE_BASE_PATH }}
                  - THUMBNAIL_BASE_PATH=${{ secrets.THUMBNAIL_BASE_PATH }}
                  - CLIENT_IMAGE_BASE_PATH=${{ secrets.CLIENT_IMAGE_BASE_PATH }}
                  - CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
                expose:
                  - "3001"
                ports:
                  - "3001:3001"
            EOL

            # Login no GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull da nova imagem
            docker pull ghcr.io/${{ github.repository }}:main

            # Parar e remover containers antigos
            docker-compose -f docker-compose.prod.yml down

            # Iniciar com a nova imagem
            docker-compose -f docker-compose.prod.yml up -d
